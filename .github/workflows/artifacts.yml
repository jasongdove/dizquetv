name: Build Artifacts
on:
  workflow_call:
    inputs:
      release_tag:
        description: 'Release tag'
        required: true
        type: string
      release_version:
        description: 'Release version number (e.g. v0.3.7-alpha)'
        required: true
        type: string
      info_version:
        description: 'Informational version number (e.g. 0.3.7-alpha)'
        required: true
        type: string
    secrets:
      # apple_developer_certificate_p12_base64:
      #   required: true
      # apple_developer_certificate_password:
      #   required: true
      # ac_username:
      #   required: true
      # ac_password:
      #   required: true
      gh_token:
        required: true
jobs:
  # build_and_upload_mac:
  #   name: Mac Build & Upload
  #   runs-on: ${{ matrix.os }}
  #   if: contains(github.event.head_commit.message, '[no build]') == false
  #   strategy:
  #     matrix:
  #       include:
  #         - os: macos-11
  #           kind: macOS
  #           target: osx-x64
  #         - os: macos-11
  #           kind: macOS
  #           target: osx-arm64
  #   steps:
  #     - name: Get the sources
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         submodules: true

  #     - name: Setup .NET Core
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: 7.0.x

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '14'

  #     - name: Cache NPM dependencies
  #       uses: bahmutov/npm-install@v1.8.28
  #       with:
  #         working-directory: ErsatzTV/client-app

  #     - name: Clean
  #       run: dotnet clean --configuration Release && dotnet nuget locals all --clear

  #     - name: Install dependencies
  #       run: dotnet restore -r "${{ matrix.target}}"

  #     - name: Import Code-Signing Certificates
  #       uses: Apple-Actions/import-codesign-certs@v1
  #       with:
  #         p12-file-base64: ${{ secrets.apple_developer_certificate_p12_base64 }}
  #         p12-password: ${{ secrets.apple_developer_certificate_password }}

  #     - name: Calculate Release Name
  #       shell: bash
  #       run: |
  #         release_name="ErsatzTV-${{ inputs.release_version }}-${{ matrix.target }}"
  #         echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV

  #     - name: Build
  #       shell: bash
  #       run: |
  #         sed -i '' '/Scanner/d' ErsatzTV/ErsatzTV.csproj
  #         dotnet publish ErsatzTV.Scanner/ErsatzTV.Scanner.csproj --framework net7.0 --runtime "${{ matrix.target }}" -c Release -o publish -p:InformationalVersion="${{ inputs.release_version }}-${{ matrix.target }}" -p:EnableCompressionInSingleFile=false -p:DebugType=Embedded -p:PublishSingleFile=true --self-contained true
  #         dotnet publish ErsatzTV/ErsatzTV.csproj --framework net7.0 --runtime "${{ matrix.target }}" -c Release -o publish -p:InformationalVersion="${{ inputs.release_version }}-${{ matrix.target }}" -p:EnableCompressionInSingleFile=false -p:DebugType=Embedded -p:PublishSingleFile=true --self-contained true

  #     - name: Bundle
  #       shell: bash
  #       run: |
  #         brew install coreutils
  #         plutil -replace CFBundleShortVersionString -string "${{ inputs.info_version }}" ErsatzTV-macOS/ErsatzTV-macOS/Info.plist
  #         plutil -replace CFBundleVersion -string "${{ inputs.info_version }}" ErsatzTV-macOS/ErsatzTV-macOS/Info.plist
  #         scripts/macOS/bundle.sh

  #     - name: Sign
  #       shell: bash
  #       run: scripts/macOS/sign.sh
      
  #     - name: Create DMG
  #       shell: bash
  #       run: |
  #         brew install create-dmg
  #         create-dmg \
  #           --volname "ErsatzTV" \
  #           --volicon "artwork/ErsatzTV.icns" \
  #           --window-pos 200 120 \
  #           --window-size 800 400 \
  #           --icon-size 100 \
  #           --icon "ErsatzTV.app" 200 190 \
  #           --hide-extension "ErsatzTV.app" \
  #           --app-drop-link 600 185 \
  #           --skip-jenkins \
  #           "ErsatzTV.dmg" \
  #           "ErsatzTV.app/"

  #     - name: Notarize
  #       shell: bash
  #       run: |
  #         brew tap mitchellh/gon
  #         brew install mitchellh/gon/gon
  #         gon -log-level=debug -log-json ./gon.json
  #       env:
  #         AC_USERNAME: ${{ secrets.ac_username }}
  #         AC_PASSWORD: ${{ secrets.ac_password }}

  #     - name: Cleanup
  #       shell: bash
  #       run: |
  #         mv ErsatzTV.dmg "${{ env.RELEASE_NAME }}.dmg"
  #         rm -r publish
  #         rm -r ErsatzTV.app

  #     - name: Delete old release assets
  #       uses: mknejp/delete-release-assets@v1
  #       if: ${{ inputs.release_tag == 'develop' }}
  #       with:
  #         token: ${{ secrets.gh_token }}
  #         tag: ${{ inputs.release_tag }}
  #         fail-if-no-assets: false
  #         assets: |
  #           *${{ matrix.target }}.dmg

  #     - name: Publish
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         prerelease: true
  #         tag_name: ${{ inputs.release_tag }}
  #         files: |
  #           ${{ env.RELEASE_NAME }}.dmg
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.gh_token }}
  build_and_upload:
    name: Build & Upload
    runs-on: ${{ matrix.os }}
    if: contains(github.event.head_commit.message, '[no build]') == false
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
          - os: ubuntu-latest
            target: linux-arm64
          - os: ubuntu-latest
            target: win-x64
    steps:
      - name: Get the sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '12'

      - name: Cache NPM dependencies
        uses: bahmutov/npm-install@v1.8.29

      - name: Build
        shell: bash
        run: |
          release_name="dizquetv-${{ inputs.release_version }}-${{ matrix.target }}"
          echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV

          npm install -g pkg

          rm -rf dist
          npm run build || exit 1
          npm run compile  || exit 1
          cp -r web dist/web
          cp -r resources dist/
          cp -r locales/ dist/locales/
          cp pkg.json dist/
          cd dist
          pkg index.js -c pkg.json --no-bytecode --public-packages "*" --public -t node12-${{ matrix.target }} -o "$release_name"

      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        if: ${{ inputs.release_tag == 'develop' }}
        with:
          token: ${{ secrets.gh_token }}
          tag: ${{ inputs.release_tag }}
          fail-if-no-assets: false
          assets: |
            *${{ matrix.target }}*
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ inputs.release_tag }}
          files: |
            dist/${{ env.RELEASE_NAME }}*
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
